# -*- coding: utf-8 -*-
"""horse_health_prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12r52z-WV4WC_gY5XRq9SHYZFxZAUNOyd
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

# Define dataset URLs
train_csv_url = "https://raw.githubusercontent.com/iamLihith14/Predict-Health-Outcomes-of-Horses/main/train.csv"
test_csv_url = "https://raw.githubusercontent.com/iamLihith14/Predict-Health-Outcomes-of-Horses/main/test%20(1).csv"
sample_submission_csv_url = "https://raw.githubusercontent.com/iamLihith14/Predict-Health-Outcomes-of-Horses/main/sample_submission.csv"

# Load data
train_data = pd.read_csv(train_csv_url)
test_data = pd.read_csv(test_csv_url)
sample_submission = pd.read_csv(sample_submission_csv_url)

# Combine training and test data for preprocessing
combined_data = pd.concat([train_data, test_data], ignore_index=True)

# Preprocess data
label_encoder = LabelEncoder()

# Encode categorical columns
categorical_columns = ['surgery', 'age', 'temp_of_extremities', 'peripheral_pulse', 'mucous_membrane',
                       'capillary_refill_time', 'pain', 'peristalsis', 'abdominal_distention',
                       'nasogastric_tube', 'nasogastric_reflux', 'rectal_exam_feces', 'abdomen',
                       'abdomo_appearance', 'surgical_lesion', 'cp_data']

for col in categorical_columns:
    combined_data[col] = label_encoder.fit_transform(combined_data[col])

# Split the data back into training and test data
train_data = combined_data[:len(train_data)]
test_data = combined_data[len(train_data):]

# Split the data into features (X) and target (y)
X_train = train_data.drop(columns=['outcome'])
y_train = train_data['outcome']
X_test = test_data.drop(columns=['outcome'])

# Normalize the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Build the model
model = keras.Sequential([
    layers.Dense(64, activation='relu', input_dim=X_train.shape[1]),
    layers.Dense(32, activation='relu'),
    layers.Dense(3, activation='softmax')  # Assuming 3 classes for outcome
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=32, verbose=1)

# Streamlit App
st.title("Horse Health Outcome Predictor")
st.sidebar.title("Input Features")

# Collect user inputs
surgery = st.sidebar.selectbox("Surgery", ["yes", "no"])
age = st.sidebar.selectbox("Age", ["adult", "young"])
temp_of_extremities = st.sidebar.selectbox("Temperature of Extremities", ["normal", "cool", "cold", "warm"])
peripheral_pulse = st.sidebar.selectbox("Peripheral Pulse", ["normal", "reduced", "absent"])
mucous_membrane = st.sidebar.selectbox("Mucous Membrane", ["normal_pink", "bright_pink", "pale_pink",
                                                           "pale_cyanotic", "bright_red", "dark_cyanotic"])
capillary_refill_time = st.sidebar.selectbox("Capillary Refill Time", ["less_3_sec", "more_3_sec", "3"])
pain = st.sidebar.selectbox("Pain", ["mild_pain", "depressed", "severe_pain", "alert"])
peristalsis = st.sidebar.selectbox("Peristalsis", ["hypomotile", "absent", "hypermotile", "normal"])
abdominal_distention = st.sidebar.selectbox("Abdominal Distention", ["slight", "severe", "none", "moderate"])
nasogastric_tube = st.sidebar.selectbox("Nasogastric Tube", ["slight", "none", "significant"])
nasogastric_reflux = st.sidebar.selectbox("Nasogastric Reflux", ["none", "significant"])
rectal_exam_feces = st.sidebar.selectbox("Rectal Exam Feces", ["normal", "decreased", "increased", "absent"])
abdomen = st.sidebar.selectbox("Abdomen", ["distend_large", "other", "normal", "firm"])
abdomo_appearance = st.sidebar.selectbox("Abdomo Appearance", ["cloudy", "serosanguious", "clear", "purulent"])
surgical_lesion = st.sidebar.selectbox("Surgical Lesion", ["no", "yes"])
cp_data = st.sidebar.selectbox("CP Data", ["no", "yes"])

# Predict health outcome
def predict_health_outcome(surgery, age, temp_of_extremities, peripheral_pulse, mucous_membrane, capillary_refill_time,
                            pain, peristalsis, abdominal_distention, nasogastric_tube, nasogastric_reflux,
                            rectal_exam_feces, abdomen, abdomo_appearance, surgical_lesion, cp_data):
    input_data = [
        label_encoder.transform([surgery])[0], label_encoder.transform([age])[0],
        label_encoder.transform([temp_of_extremities])[0], label_encoder.transform([peripheral_pulse])[0],
        label_encoder.transform([mucous_membrane])[0], label_encoder.transform([capillary_refill_time])[0],
        label_encoder.transform([pain])[0], label_encoder.transform([peristalsis])[0],
        label_encoder.transform([abdominal_distention])[0], label_encoder.transform([nasogastric_tube])[0],
        label_encoder.transform([nasogastric_reflux])[0], label_encoder.transform([rectal_exam_feces])[0],
        label_encoder.transform([abdomen])[0], label_encoder.transform([abdomo_appearance])[0],
        label_encoder.transform([surgical_lesion])[0], label_encoder.transform([cp_data])[0]
    ]
    input_data = scaler.transform([input_data])
    prediction = model.predict(input_data)
    return label_encoder.inverse_transform([np.argmax(prediction)])[0]

if st.sidebar.button("Predict Outcome"):
    predicted_outcome = predict_health_outcome(surgery, age, temp_of_extremities, peripheral_pulse, mucous_membrane,
                                               capillary_refill_time, pain, peristalsis, abdominal_distention,
                                               nasogastric_tube, nasogastric_reflux, rectal_exam_feces, abdomen,
                                               abdomo_appearance, surgical_lesion, cp_data)
    st.write(f"Predicted Health Outcome: {predicted_outcome}")

# Display the final validation accuracy
st.write(f"Final Validation Accuracy: {accuracy:.4f}")

# Optional: Display the dataset
if st.sidebar.checkbox("Show Dataset"):
    st.sub


